{"version":3,"sources":["../src/arrayDifference.js"],"names":[],"mappings":";;;;;kBAkBwB;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAT,SAAS,eAAT,CAAyB,MAAzB,EAAiC,MAAjC,EAAyC,aAAzC,EAAwD;AACnE,WAAO,2BAAY,OAAO,MAAP,CAAc,UAAS,IAAT,EAAe;AAC5C,eAAO,CAAC,6BAAc,MAAd,EAAsB,IAAtB,CAAD,CADqC;KAAf,CAAd,CAEhB,MAFgB,CAET,kBAAkB,IAAlB,GAAyB,OAAO,MAAP,CAAc,UAAS,IAAT,EAAe;AAC5D,eAAO,CAAC,6BAAc,MAAd,EAAsB,IAAtB,CAAD,CADqD;KAAf,CAAvC,GAEL,EAFK,CAFH,CAAP,CADmE;CAAxD","file":"arrayDifference.js","sourcesContent":["import arrayUnique from './arrayUnique';\nimport arrayContains from './arrayContains';\n\n/**\n *\n * @param {Array} array1\n * @param {Array} array2\n * @param {boolean} biDirectional False returns A-B while true returns A-B concat B-A\n * @returns {Array}\n *\n * @throws {TypeError} When `filter` can not be found on `array`. This generally happens when the array is `null` or `undefined`\n *\n * @example\n * const a = [1, 2];\n * const b = [1, 3];\n * difference(a, b) // returns: [2]\n * difference(a, b, true) // returns: [2, 3]\n */\nexport default function arrayDifference(array1, array2, biDirectional) {\n    return arrayUnique(array1.filter(function(item) {\n        return !arrayContains(array2, item);\n    }).concat(biDirectional === true ? array2.filter(function(item) {\n        return !arrayContains(array1, item);\n    }) : []));\n}\n"]}