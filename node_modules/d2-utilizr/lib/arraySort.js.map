{"version":3,"sources":["../src/arraySort.js"],"names":[],"mappings":";;;;;kBAKwB;;;;;;;;;;;;;;;;;;;;AAAT,SAAS,SAAT,CAAmB,KAAnB,EAA0B,SAA1B,EAAqC,GAArC,EAA0C,UAA1C,EAAsD;;;AAGjE,QAAI,CAAC,uBAAQ,KAAR,CAAD,EAAiB;AACjB,eADiB;KAArB;;AAIA,UAAM,CAAC,CAAC,GAAD,IAAQ,wBAAS,GAAT,CAAT,GAAyB,GAAzB,GAA+B,MAA/B,CAP2D;;AASjE,UAAM,IAAN,CAAY,UAAS,CAAT,EAAY,CAAZ,EAAe;;AAEvB,YAAI,wBAAS,CAAT,KAAe,wBAAS,CAAT,CAAf,EAA4B;AAC5B,gBAAI,EAAE,GAAF,CAAJ,CAD4B;AAE5B,gBAAI,EAAE,GAAF,CAAJ,CAF4B;SAAhC;;;AAFuB,YAQnB,uBAAQ,CAAR,KAAc,uBAAQ,CAAR,CAAd,EAA0B;AAC1B,gBAAI,EAAE,GAAF,CAAJ,CAD0B;AAE1B,gBAAI,EAAE,GAAF,CAAJ,CAF0B;SAA9B;;;AARuB,YAcnB,wBAAS,CAAT,KAAe,wBAAS,CAAT,CAAf,EAA4B;AAC5B,gBAAI,EAAE,WAAF,EAAJ,CAD4B;AAE5B,gBAAI,EAAE,WAAF,EAAJ,CAF4B;;AAI5B,gBAAI,cAAc,MAAd,EAAsB;;AACtB,uBAAO,IAAI,CAAJ,GAAQ,CAAR,GAAa,IAAI,CAAJ,GAAQ,CAAC,CAAD,GAAK,CAAb,CADE;aAA1B,MAGK;AACD,uBAAO,IAAI,CAAJ,GAAQ,CAAC,CAAD,GAAM,IAAI,CAAJ,GAAQ,CAAR,GAAY,CAAZ,CADpB;aAHL;;;;AAJJ,aAaK,IAAI,wBAAS,CAAT,KAAe,wBAAS,CAAT,CAAf,EAA4B;AACjC,uBAAO,cAAc,MAAd,GAAuB,IAAI,CAAJ,GAAQ,IAAI,CAAJ,CADL;aAAhC,MAIA,IAAI,MAAM,SAAN,IAAmB,MAAM,IAAN,EAAY;AACpC,uBAAO,aAAa,CAAC,CAAD,GAAK,CAAlB,CAD6B;aAAnC,MAIA,IAAI,MAAM,SAAN,IAAmB,MAAM,IAAN,EAAY;AACpC,uBAAO,aAAa,CAAb,GAAiB,CAAC,CAAD,CADY;aAAnC;;AAIL,eAAO,CAAC,CAAD,CAvCgB;KAAf,CAAZ,CATiE;;AAmDjE,WAAO,KAAP,CAnDiE;CAAtD","file":"arraySort.js","sourcesContent":["import isString from './isString';\nimport isNumber from './isNumber';\nimport isArray from './isArray';\nimport isObject from './isObject';\n\nexport default function arraySort(array, direction, key, emptyFirst) {\n    // supports [number], [string], [{key: number}], [{key: string}], [[string]], [[number]]\n\n    if (!isArray(array))Â {\n        return;\n    }\n\n    key = !!key || isNumber(key) ? key : 'name';\n\n    array.sort( function(a, b) {\n        // if object, get the property values\n        if (isObject(a) && isObject(b)) {\n            a = a[key];\n            b = b[key];\n        }\n\n        // if array, get from the right index\n        if (isArray(a) && isArray(b)) {\n            a = a[key];\n            b = b[key];\n        }\n\n        // string\n        if (isString(a) && isString(b)) {\n            a = a.toLowerCase();\n            b = b.toLowerCase();\n\n            if (direction === 'DESC') { // TODO: Case sensitive really required? Why not allow `desc`, `Desc` or `dEsC`?\n                return a < b ? 1 : (a > b ? -1 : 0);\n            }\n            else {\n                return a < b ? -1 : (a > b ? 1 : 0);\n            }\n        }\n\n        // number\n        else if (isNumber(a) && isNumber(b)) {\n            return direction === 'DESC' ? b - a : a - b;\n        }\n\n        else if (a === undefined || a === null) {\n            return emptyFirst ? -1 : 1;\n        }\n\n        else if (b === undefined || b === null) {\n            return emptyFirst ? 1 : -1;\n        }\n\n        return -1;\n    });\n\n    return array;\n}\n"]}