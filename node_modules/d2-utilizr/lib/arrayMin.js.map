{"version":3,"sources":["../src/arrayMin.js"],"names":[],"mappings":";;;;;kBAewB;;;;;;;;;;;;;;;;AAAT,SAAS,QAAT,CAAkB,KAAlB,EAAyB,YAAzB,EAAuC;AAClD,QAAI,IAAI,CAAJ;QACA,KAAK,MAAM,MAAN;QACL,IAFJ;QAGI,MAAM,MAAM,CAAN,CAAN,CAJ8C;;AAMlD,WAAO,IAAI,EAAJ,EAAQ,GAAf,EAAoB;AAChB,eAAO,MAAM,CAAN,CAAP,CADgB;;AAGhB,YAAI,YAAJ,EAAkB;AACd,gBAAI,aAAa,GAAb,EAAkB,IAAlB,MAA4B,CAA5B,EAA+B;AAC/B,sBAAM,IAAN,CAD+B;aAAnC;SADJ,MAKK;AACD,gBAAI,OAAO,GAAP,EAAY;AACZ,sBAAM,IAAN,CADY;aAAhB;SANJ;KAHJ;;AAeA,WAAO,GAAP,CArBkD;CAAvC","file":"arrayMin.js","sourcesContent":["/**\n * Return the lowest value (number) in the given array\n *\n * @param {Array} array The array to be scanned\n * @returns {Array} The lowest value\n *\n * @throws {TypeError} When the passed array is not actually an array.\n *\n * @example\n * const sourceArray = [3,1,2];\n * arrayMax(sourceArray); // Returns: 1\n *\n * @example\n * arrayClean() // throws: Cannot read property 'length' of undefined\n */\nexport default function arrayMin(array, comparisonFn) {\n    var i = 0,\n        ln = array.length,\n        item,\n        min = array[0];\n\n    for (; i < ln; i++) {\n        item = array[i];\n\n        if (comparisonFn) {\n            if (comparisonFn(min, item) === 1) {\n                min = item;\n            }\n        }\n        else {\n            if (item < min) {\n                min = item;\n            }\n        }\n    }\n\n    return min;\n}\n"]}