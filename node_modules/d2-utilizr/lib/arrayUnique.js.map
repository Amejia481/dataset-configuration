{"version":3,"sources":["../src/arrayUnique.js"],"names":[],"mappings":";;;;;kBAsBwB;;;;;;;;;;;;;;;;;;;;;;;AAAT,SAAS,WAAT,CAAqB,KAArB,EAA4B;;AAEvC,QAAI,WAAW,EAAX,CAFmC;AAGvC,QAAI,IAAI,CAAJ,CAHmC;AAIvC,QAAI,MAAM,MAAM,MAAN,CAJ6B;AAKvC,QAAI,IAAJ,CALuC;;AAOvC,WAAO,IAAI,GAAJ,EAAS,GAAhB,EAAqB;AACjB,eAAO,MAAM,CAAN,CAAP,CADiB;;AAGjB,YAAI,SAAS,OAAT,CAAiB,IAAjB,MAA2B,CAAC,CAAD,EAAI;AAC/B,qBAAS,IAAT,CAAc,IAAd,EAD+B;SAAnC;KAHJ;;AAQA,WAAO,QAAP,CAfuC;CAA5B","file":"arrayUnique.js","sourcesContent":["/**\n * Creates an array of unique values from the array passed. This function does not do a _deep_ compare.\n * Objects with the same values will therefore not be filtered.\n *\n * @param {Array} array The array to create the array of uniques from\n * @returns {Array} The array containing the unique values\n *\n * @throws {TypeError} Is thrown when the argument passed is not an `array`\n *\n * @example\n * const sourceArray = [1, 1, 2, 3, 2, 4, 4, 3];\n * arrayUnique(sourceArray); // returns: [1, 2, 3, 4]\n *\n * @example\n * const A = {name: 'A'};\n * const B = {name: 'B'};\n * arrayUnique([A, A, B, B]); // Returns: [{name: 'A'}, {name: 'B'}]\n *\n * @example\n * const sourceArray = [{name: 'A'}, {name: 'B'}, {name: 'B'}];\n * arrayUnique(sourceArray); // Returns: [{name: 'A'}, {name: 'B'}, {name: 'B'}]\n */\nexport default function arrayUnique(array) {\n    // TODO: Could be written as `return [...(new Set(array))];`\n    var newArray = [];\n    var i = 0;\n    var len = array.length;\n    var item;\n\n    for (; i < len; i++) {\n        item = array[i];\n\n        if (newArray.indexOf(item) === -1) {\n            newArray.push(item);\n        }\n    }\n\n    return newArray;\n}\n"]}