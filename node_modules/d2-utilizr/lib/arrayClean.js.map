{"version":3,"sources":["../src/arrayClean.js"],"names":[],"mappings":";;;;;kBAoBwB;;;;;;;;;;;;;;;;;;;;;;;;;;AAAT,SAAS,UAAT,CAAoB,KAApB,EAA2B;AACtC,QAAI,UAAU,EAAV;QACA,IAAI,CAAJ;QACA,KAAK,MAAM,MAAN;;AACL,QAHJ,CADsC;;AAMtC,WAAO,IAAI,EAAJ,EAAQ,GAAf,EAAoB;AAChB,eAAO,MAAM,CAAN,CAAP,CADgB;;AAGhB,YAAI,CAAC,uBAAQ,IAAR,CAAD,EAAgB;AAChB,oBAAQ,IAAR,CAAa,IAAb,EADgB;SAApB;KAHJ;;AAQA,WAAO,OAAP,CAdsC;CAA3B","file":"arrayClean.js","sourcesContent":["import isEmpty from './isEmpty';\n\n/**\n * Cleans the given array of _empty_ values\n *\n * @see {isEmpty} for how the values are determined to be empty.\n *\n * @param {Array} array The array to be _cleaned_\n * @returns {Array} The clean array\n *\n * @throws {TypeError} When the passed array is not actually an array.\n *\n * @example\n * const sourceArray = [undefined, null, true, '', {}];\n * arrayClean(sourceArray); // Returns: [true, {}]\n *\n * @example\n * arrayClean() // throws: Cannot read property 'length' of undefined\n */\n// TODO: Could be written as `array.filter(isEmpty);`\nexport default function arrayClean(array) {\n    var results = [],\n        i = 0,\n        ln = array.length,// TODO: throws if the error is undefined\n        item;\n\n    for (; i < ln; i++) {\n        item = array[i];\n\n        if (!isEmpty(item)) {\n            results.push(item);\n        }\n    }\n\n    return results;\n}\n"]}