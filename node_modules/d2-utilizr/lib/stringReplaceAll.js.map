{"version":3,"sources":["../src/stringReplaceAll.js"],"names":[],"mappings":";;;;;kBASwB;;;;;;;;;;AAAT,SAAS,gBAAT,CAA0B,GAA1B,EAA+B,UAA/B,EAA2C,YAA3C,EAAyD,MAAzD,EAAiE;AAC5E,SAAO,IAAI,OAAJ,CAAY,IAAI,MAAJ,CAAW,WAAW,OAAX,CAAmB,iDAAnB,EAAsE,MAAtE,CAAX,EAA2F,SAAS,IAAT,GAAgB,GAAhB,CAAvG,EAA8H,OAAQ,YAAP,IAAwB,QAAxB,GAAoC,aAAa,OAAb,CAAqB,KAArB,EAA4B,MAA5B,CAArC,GAA2E,YAA3E,CAArI,CAD4E;CAAjE","file":"stringReplaceAll.js","sourcesContent":["/**\n * Replace all occurrences of the `matchValue` within the `str` parameter.\n *\n * @param {string} str The string to operate on\n * @param {string} matchValue The value to match on\n * @param {string|function} replaceValue The value to replace the matches with\n * @param {boolean} ignore Case sensitivity ignore flag. Pass `true` to ignore case. (Defaults to `false`)\n * @returns {XML|void|string|*} The resulting string.\n */\nexport default function stringReplaceAll(str, matchValue, replaceValue, ignore) {\n    return str.replace(new RegExp(matchValue.replace(/([\\/\\,\\!\\\\\\^\\$\\{\\}\\[\\]\\(\\)\\.\\*\\+\\?\\|\\<\\>\\-\\&])/g, \"\\\\$&\"), (ignore ? \"gi\" : \"g\")), (typeof(replaceValue) == \"string\") ? replaceValue.replace(/\\$/g, \"$$$$\") : replaceValue);\n}\n"]}